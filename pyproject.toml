[tool.poetry]
name = "cellveyor"
version = "0.1.0"
description = ""
authors = ["Gregory M. Kapfhammer <gkapfham@allegheny.edu>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
rich = "^13.4.2"
typer = {extras = ["all"], version = "^0.9.0"}
pandas = "^2.1.1"
openpyxl = "^3.1.2"
requests = "^2.31.0"
pygithub = "^2.1.1"
pyyaml = "^6.0.1"

[tool.poetry.scripts]
cellveyor = "cellveyor.main:cli"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
taskipy = "^1.11.0"
mypy = "^1.4.1"
isort = "^5.12.0"
hypothesis = {extras = ["cli"], version = "^6.81.1"}
pytest-clarity = "^1.0.1"
pytest-randomly = "^3.13.0"
pytest-pretty = "^1.2.0"
pytest-xdist = "^3.3.1"
types-pyyaml = "^6.0.12.12"
pandas-stubs = "^2.1.1.230928"
ruff = "0.1.15"
symbex = "^1.4"

[tool.pytest.ini_options]
filterwarnings = [
    "error",
]

[tool.ruff]
line-length = 79
ignore = [
    "E501", # do not check line length
]
select = [
    "E",    # pycodestyle errors
    "I",    # isort
    "F",    # Pyflakes
    "PL",   # pylint
    "Q",    # flake8-quotes
    "RUF",  # ruff-specific
    "W",    # pycodestyle warnings
    "T201"  # flake8-print
]

[tool.isort]
include_trailing_comma = true
force_single_line = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.taskipy.variables]
project = "cellveyor"
tests = "tests"
check-command = { var = "ruff check {project} {tests}", recursive = true }
coverage-test-command = "pytest -s --cov-context=test --cov-fail-under=90 --cov-report term-missing --cov-report json --cov --cov-branch"
coverage-test-command-silent = "pytest -x --show-capture=no --cov-report term-missing --cov-report json --cov --cov-branch"
developer-test-command = "pytest -x -s"
developer-test-silent-command = "pytest -x --show-capture=no"
fixformat-command = { var = "ruff format {project} {tests}", recursive = true }
format-command = { var = "ruff format --check {project} {tests}", recursive = true }
symbex-typed-command = {var = "symbex -s --untyped -d {project} --check", recursive = true}
symbex-documented-command = {var = "symbex -s --undocumented -d {project} --check", recursive = true}

[tool.taskipy.tasks]
all = "task format && task lint && task test"
lint = "task format && task check && task mypy && task symbex"
check = { cmd = "{check-command}", help = "Run the ruff linting checks", use_vars = true }
format = { cmd = "{format-command}", help = "Run the ruff formatter on source code", use_vars = true }
format-fix = { cmd = "{fixformat-command}", help = "Run the ruff formatter to fix source code", use_vars = true}
mypy = { cmd = "poetry run mypy cellveyor", help = "Run the mypy type checker for potential type errors" }
symbex = "task symbex-typed && task symbex-documented"
symbex-typed = { cmd = "{symbex-typed-command}", help = "Run symbex for fully typed functions", use_vars = true }
symbex-documented = { cmd = "{symbex-documented-command}", help = "Run symbex for documentation", use_vars = true }
test = { cmd = "pytest -x -s -vv -n auto", help = "Run the pytest test suite using order randomization and test distribution" }
test-not-randomly = { cmd = "pytest -x -s -vv -p no:randomly", help = "Run the pytest test suite without order randomization" }
test-not-xdist = { cmd = "pytest -x -s -vv -p no:xdist", help = "Run the pytest test suite without order randomization" }
test-silent = { cmd = "pytest -x --show-capture=no -n auto", help = "Run the pytest test suite without showing output" }
test-silent-not-randomly = { cmd = "pytest -x --show-capture=no -p no:randomly", help = "Run the pytest test suite without showing output and order randomization" }
test-silent-not-xdist = { cmd = "pytest -x --show-capture=no -p no:xdist", help = "Run the pytest test suite without showing output and test distribution" }

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
